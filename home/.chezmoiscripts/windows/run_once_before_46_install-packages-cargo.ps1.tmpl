# Cargo Package Installation - Working Version
Write-Host "=== Cargo Package Installation ===" -ForegroundColor Cyan

# Check cargo availability
if (-not (Get-Command cargo -ErrorAction SilentlyContinue)) {
    Write-Host "Cargo is not installed. Please install Rust first." -ForegroundColor Red
    exit 1
}

Write-Host "Cargo is available: $(cargo --version)" -ForegroundColor Green

# Check installation preference
{{- if not .installCargoPackages }}
Write-Host "Cargo package installation disabled via configuration" -ForegroundColor Yellow
Write-Host "To enable: Run 'chezmoi data set installCargoPackages true'" -ForegroundColor Yellow
exit 0
{{- end }}

Write-Host "Cargo package installation enabled" -ForegroundColor Green

{{- if .pkgs.cargo }}
# Define packages to install
$packages = @()
{{- range $category, $pkgList := .pkgs.cargo }}
{{- range $pkg := $pkgList }}
$packages += "{{ $pkg }}"
{{- end }}
{{- end }}

if ($packages.Count -eq 0) {
    Write-Host "No Cargo packages configured for installation" -ForegroundColor Yellow
    exit 0
}

Write-Host "Installing $($packages.Count) Cargo packages..." -ForegroundColor Yellow

# Install each package
for ($i = 0; $i -lt $packages.Count; $i++) {
    $pkg = $packages[$i]
    $current = $i + 1
    Write-Host "[$current/$($packages.Count)] Installing: $pkg" -ForegroundColor Yellow

    $process = Start-Process -FilePath "cargo" -ArgumentList "install", $pkg -Wait -PassThru -NoNewWindow

    if ($process.ExitCode -eq 0) {
        Write-Host "✓ $pkg installed successfully" -ForegroundColor Green
    } else {
        Write-Host "✗ Failed to install $pkg" -ForegroundColor Red
    }
}

Write-Host "Cargo package installation completed!" -ForegroundColor Green
Write-Host "Installed packages are available in ~/.cargo/bin" -ForegroundColor Cyan
{{- else }}
Write-Host "No Cargo packages configured for installation" -ForegroundColor Yellow
Write-Host "Add packages to home/.chezmoidata/pkgs/cargo.yml to install them" -ForegroundColor Yellow
{{- end }}
