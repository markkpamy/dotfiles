# AWS Helper Functions for Bash Shell (using existing BWS functions)

# Quick AWS profile switch
aws-profile() {
    if [ -z "$1" ]; then
        echo "Current AWS profile: ${AWS_PROFILE:-default}"
        echo "Available profiles:"
        aws configure list-profiles
    else
        export AWS_PROFILE="$1"
        echo "‚úÖ AWS profile set to: $1"
        aws sts get-caller-identity
    fi
}

# AWS role assumption helper
aws-assume() {
    local profile="$1"
    if [ -z "$profile" ]; then
        echo "Usage: aws-assume <profile-name>"
        return 1
    fi

    echo "üîÑ Assuming role for profile: $profile"
    aws sts get-caller-identity --profile "$profile"
}

# Update AWS config (just re-apply chezmoi)
aws-config-update() {
    echo "üîÑ Updating AWS config from Bitwarden..."

    # Ensure BWS session is active
    if [ -z "${BWS_ACCESS_TOKEN:-}" ]; then
        echo "üîê Setting up BWS session..."
        bwst
    fi

    # Re-apply chezmoi templates
    echo "üìù Re-applying Chezmoi templates..."
    chezmoi apply ~/.aws/config

    echo "‚úÖ AWS config updated successfully"
    echo "üìã Available profiles:"
    aws configure list-profiles
}

# Show AWS profile information (without exposing account numbers)
aws-profiles() {
    echo "üîç AWS Profile Information:"
    echo "=========================="

    # Check if AWS CLI is available
    if ! command -v aws &> /dev/null; then
        echo "‚ùå AWS CLI not found"
        return 1
    fi

    # Check if config file exists
    local config_file="$HOME/.aws/config"
    if [ ! -f "$config_file" ]; then
        echo "‚ùå AWS config file not found at $config_file"
        echo "üí° Run 'aws-config-update' to generate from Bitwarden"
        return 1
    fi

    echo "üìã Available Profiles:"
    echo "----------------------"

    # Get all profiles using AWS CLI and add region information
    aws configure list-profiles | while read -r profile; do
        local region
        if [ "$profile" = "default" ]; then
            region=$(aws configure get region --profile default 2>/dev/null || echo "(region not set)")
        else
            region=$(aws configure get region --profile "$profile" 2>/dev/null || echo "(region not set)")
        fi

        # Show role info if it's a role-based profile
        local role_arn
        role_arn=$(aws configure get role_arn --profile "$profile" 2>/dev/null)

        if [ -n "$role_arn" ]; then
            # Extract account ID from role ARN for display
            local account_id
            account_id=$(echo "$role_arn" | sed 's/.*::\([0-9]*\):.*/\1/')
            printf "%-25s %-15s (Role: %s)\n" "$profile" "$region" "$account_id"
        else
            printf "%-25s %-15s (Base credentials)\n" "$profile" "$region"
        fi
    done

    echo ""
    echo "üí° Use 'aws-profile <n>' to switch profiles"
    echo "üí° Use 'aws-config-update' to refresh from Bitwarden"
    echo "üí° Current profile: ${AWS_PROFILE:-default}"

    # Show current identity
    echo ""
    echo "üîë Current Identity:"
    echo "-------------------"
    if aws sts get-caller-identity --output table 2>/dev/null; then
        echo "‚úÖ Successfully authenticated"
    else
        echo "‚ùå Not authenticated or session expired"
        echo "üí° Ensure BWS session is active: bwst"
    fi
}
