# AWS Helper Functions for Fish Shell

# Quick AWS profile switch
function aws-profile
    if test (count $argv) -eq 0
        echo "Current AWS profile: "(set -q AWS_PROFILE; and echo $AWS_PROFILE; or echo "default")
        echo "Available profiles:"
        aws configure list-profiles
    else
        set -gx AWS_PROFILE $argv[1]
        echo "‚úÖ AWS profile set to: $argv[1]"
        aws sts get-caller-identity
    end
end

# AWS identity checker for a specific profile
function aws-whoami
    if test (count $argv) -eq 0
        echo "Usage: aws-whoami <profile-name>"
        return 1
    end

    echo "üîç Checking identity for profile: $argv[1]"
    aws sts get-caller-identity --profile $argv[1]
end

# Update AWS config (just re-apply chezmoi)
function aws-config-update
    echo "üîÑ Updating AWS config from Bitwarden..."

    # Ensure BWS session is active
    if not set -q BWS_ACCESS_TOKEN
        echo "üîê Setting up BWS session..."
        bwst
    end

    # Re-apply chezmoi templates
    echo "üìù Re-applying Chezmoi templates..."
    chezmoi apply ~/.aws/config

    echo "‚úÖ AWS config updated successfully"
    echo "üìã Available profiles:"
    aws configure list-profiles
end

# Show AWS profile information (dynamically from config)
function aws-profiles
    echo "üîç AWS Profile Information:"
    echo "=========================="

    # Check if AWS CLI is available
    if not command -v aws &> /dev/null
        echo "‚ùå AWS CLI not found"
        return 1
    end

    # Check if config file exists
    set config_file "$HOME/.aws/config"
    if not test -f "$config_file"
        echo "‚ùå AWS config file not found at $config_file"
        echo "üí° Run 'aws-config-update' to generate from Bitwarden"
        return 1
    end

    echo "üìã Available Profiles:"
    echo "----------------------"

    # Get all profiles using AWS CLI and add region information
    aws configure list-profiles | while read -l profile
        set region (aws configure get region --profile "$profile" 2>/dev/null; or echo "(region not set)")

        # Show role info if it's a role-based profile
        set role_arn (aws configure get role_arn --profile "$profile" 2>/dev/null)

        if test -n "$role_arn"
            # Extract account ID from role ARN for display
            set account_id (echo "$role_arn" | sed 's/.*::\([0-9]*\):.*/\1/')
            printf "%-25s %-15s (Role: %s)\n" "$profile" "$region" "$account_id"
        else
            printf "%-25s %-15s (Base credentials)\n" "$profile" "$region"
        end
    end

    echo ""
    echo "üí° Use 'aws-profile <n>' to switch profiles"
    echo "üí° Use 'aws-config-update' to refresh from Bitwarden"
    echo "üí° Current profile: "(set -q AWS_PROFILE; and echo $AWS_PROFILE; or echo "default")

    # Show current identity
    echo ""
    echo "üîë Current Identity:"
    echo "-------------------"
    if aws sts get-caller-identity --output table >/dev/null 2>&1
        echo "‚úÖ Successfully authenticated"
    else
        echo "‚ùå Not authenticated or session expired"
        echo "üí° Ensure BW session is active: bwu"
    end
end

# Export AWS credentials to environment variables
function awsenv
    set profile $argv[1]
    set region $argv[2]

    if test -z "$profile"
        if set -q AWS_PROFILE
            set profile $AWS_PROFILE
        else
            set profile default
        end
    end

    if test -z "$region"
        set region eu-west-3
    end

    echo "üîë Exporting credentials for profile: $profile"

    set creds (aws configure export-credentials --profile "$profile" --format env 2>/dev/null)

    if test $status -ne 0
        echo "‚ùå Failed to get credentials for profile: $profile"
        echo "üí° Make sure the profile exists and you're authenticated"
        return 1
    end

    # Parse and export the credentials
    for line in (echo "$creds" | string split \n)
        if test -n "$line"
            set -gx (echo "$line" | string split =)
        end
    end

    set -gx AWS_DEFAULT_REGION "$region"

    echo "‚úÖ AWS credentials exported to environment variables:"
    echo "   AWS_ACCESS_KEY_ID: "(string sub -s 1 -l 20 $AWS_ACCESS_KEY_ID)"..."
    echo "   AWS_SECRET_ACCESS_KEY: ***"
    if set -q AWS_SESSION_TOKEN
        echo "   AWS_SESSION_TOKEN: "(string sub -s 1 -l 20 $AWS_SESSION_TOKEN)"..."
    end
    echo "   AWS_DEFAULT_REGION: $region"
end

# Clear AWS credentials from environment variables
function awsclear
    set -e AWS_ACCESS_KEY_ID
    set -e AWS_SECRET_ACCESS_KEY
    set -e AWS_SESSION_TOKEN
    set -e AWS_DEFAULT_REGION

    echo "‚úÖ AWS credentials cleared from environment variables"
end
