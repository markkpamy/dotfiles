# AWS Helper Functions for PowerShell
function Set-AWSProfile {
    param([string]$ProfileName)

    if (-not $ProfileName) {
        Write-Host "Current AWS profile: $($env:AWS_PROFILE ?? 'default')" -ForegroundColor Cyan
        Write-Host "Available profiles:" -ForegroundColor Cyan
        try {
            aws configure list-profiles
        }
        catch {
            Write-Host "‚ùå Error listing profiles: $($_.Exception.Message)" -ForegroundColor Red
        }
    } else {
        try {
            # Set the environment variable for the current session
            $env:AWS_PROFILE = $ProfileName

            # Also set it at the process level to avoid access issues
            [Environment]::SetEnvironmentVariable("AWS_PROFILE", $ProfileName, [EnvironmentVariableTarget]::Process)

            Write-Host "‚úÖ AWS profile set to: $ProfileName" -ForegroundColor Green

            # Test the profile with error handling
            $identity = aws sts get-caller-identity --output json 2>&1
            if ($LASTEXITCODE -eq 0) {
                $identityObj = $identity | ConvertFrom-Json
                Write-Host "üìã Account: $($identityObj.Account)" -ForegroundColor Cyan
                Write-Host "üë§ User: $($identityObj.Arn -replace '.*/', '')" -ForegroundColor Cyan
            } else {
                Write-Host "‚ö†Ô∏è  Profile set but authentication may be required" -ForegroundColor Yellow
                Write-Host "üí° Error: $identity" -ForegroundColor Yellow
            }
        }
        catch {
            Write-Host "‚ùå Error setting AWS profile: $($_.Exception.Message)" -ForegroundColor Red
            Write-Host "üí° Try running PowerShell as Administrator or check AWS CLI installation" -ForegroundColor Yellow
        }
    }
}

function Get-AWSIdentity {
    param([string]$ProfileName)

    if (-not $ProfileName) {
        Write-Host "Usage: Get-AWSIdentity <profile-name>" -ForegroundColor Yellow
        return
    }

    Write-Host "üîç Checking identity for profile: $ProfileName" -ForegroundColor Blue
    aws sts get-caller-identity --profile $ProfileName
}

function Update-AWSConfigFromBitwarden {
    Write-Host "üîÑ Updating AWS config from Bitwarden..." -ForegroundColor Blue

    # Ensure BW session is active (not BWS)
    if (-not $env:BW_SESSION) {
        Write-Host "üîê Setting up BW session..." -ForegroundColor Yellow
        Write-Host "Please run: `$env:BW_SESSION = bw unlock --raw" -ForegroundColor Yellow
        return
    }

    # Re-apply chezmoi templates
    Write-Host "üìù Re-applying Chezmoi templates..." -ForegroundColor Cyan
    chezmoi apply "$env:USERPROFILE\.aws\config"

    Write-Host "‚úÖ AWS config updated successfully" -ForegroundColor Green
    Write-Host "üìã Available profiles:" -ForegroundColor Cyan
    aws configure list-profiles
}

function Show-AWSProfiles {
    Write-Host "üîç AWS Profile Information:" -ForegroundColor Blue
    Write-Host "==========================" -ForegroundColor Blue

    # Check if AWS CLI is available
    if (-not (Get-Command aws -ErrorAction SilentlyContinue)) {
        Write-Host "‚ùå AWS CLI not found" -ForegroundColor Red
        return
    }

    # Check if config file exists
    $configFile = "$env:USERPROFILE\.aws\config"
    if (-not (Test-Path $configFile)) {
        Write-Host "‚ùå AWS config file not found at $configFile" -ForegroundColor Red
        Write-Host "üí° Run 'Update-AWSConfigFromBitwarden' to generate from Bitwarden" -ForegroundColor Yellow
        return
    }

    Write-Host "üìã Available Profiles:" -ForegroundColor Cyan
    Write-Host "----------------------" -ForegroundColor Cyan

    # Get all profiles using AWS CLI and add region information
    $profiles = aws configure list-profiles
    foreach ($profile in $profiles) {
        try {
            $region = aws configure get region --profile $profile 2>$null
            if (-not $region) { $region = "(region not set)" }

            # Show role info if it's a role-based profile
            $roleArn = aws configure get role_arn --profile $profile 2>$null

            if ($roleArn) {
                # Extract account ID from role ARN for display
                $accountId = $roleArn -replace '.*::(\d+):.*', '$1'
                Write-Host ("{0,-25} {1,-15} (Role: {2})" -f $profile, $region, $accountId) -ForegroundColor White
            } else {
                Write-Host ("{0,-25} {1,-15} (Base credentials)" -f $profile, $region) -ForegroundColor White
            }
        }
        catch {
            Write-Host ("{0,-25} (Error reading config)" -f $profile) -ForegroundColor Yellow
        }
    }

    Write-Host ""
    Write-Host "üí° Use 'aws-profile <name>' to switch profiles" -ForegroundColor Yellow
    Write-Host "üí° Use 'aws-config-update' to refresh from Bitwarden" -ForegroundColor Yellow
    Write-Host "üí° Current profile: $($env:AWS_PROFILE ?? 'default')" -ForegroundColor Yellow

    # Show current identity
    Write-Host ""
    Write-Host "üîë Current Identity:" -ForegroundColor Cyan
    Write-Host "-------------------" -ForegroundColor Cyan
    try {
        aws sts get-caller-identity --output table | Out-Host
        Write-Host "‚úÖ Successfully authenticated" -ForegroundColor Green
    }
    catch {
        Write-Host "‚ùå Not authenticated or session expired" -ForegroundColor Red
        Write-Host "üí° Ensure BW session is active: `$env:BW_SESSION = bw unlock --raw" -ForegroundColor Yellow
    }
}

function Export-AWSCredentials {
    param(
        [string]$ProfileName,
        [string]$Region = "eu-west-3"
    )

    if (-not $ProfileName) {
        $ProfileName = $env:AWS_PROFILE ?? "default"
    }

    Write-Host "üîë Exporting credentials for profile: $ProfileName" -ForegroundColor Blue

    try {
        $creds = aws configure export-credentials --profile $ProfileName --format json 2>&1

        if ($LASTEXITCODE -ne 0) {
            Write-Host "‚ùå Failed to get credentials for profile: $ProfileName" -ForegroundColor Red
            Write-Host "üí° Make sure the profile exists and you're authenticated" -ForegroundColor Yellow
            return
        }

        $credsObj = $creds | ConvertFrom-Json

        $env:AWS_ACCESS_KEY_ID = $credsObj.AccessKeyId
        $env:AWS_SECRET_ACCESS_KEY = $credsObj.SecretAccessKey
        if ($credsObj.SessionToken) {
            $env:AWS_SESSION_TOKEN = $credsObj.SessionToken
        }
        $env:AWS_DEFAULT_REGION = $Region

        Write-Host "‚úÖ AWS credentials exported to environment variables:" -ForegroundColor Green
        Write-Host "   AWS_ACCESS_KEY_ID: $($env:AWS_ACCESS_KEY_ID.Substring(0, [Math]::Min(20, $env:AWS_ACCESS_KEY_ID.Length)))..." -ForegroundColor Cyan
        Write-Host "   AWS_SECRET_ACCESS_KEY: ***" -ForegroundColor Cyan
        if ($env:AWS_SESSION_TOKEN) {
            Write-Host "   AWS_SESSION_TOKEN: $($env:AWS_SESSION_TOKEN.Substring(0, [Math]::Min(20, $env:AWS_SESSION_TOKEN.Length)))..." -ForegroundColor Cyan
        }
        Write-Host "   AWS_DEFAULT_REGION: $Region" -ForegroundColor Cyan
    }
    catch {
        Write-Host "‚ùå Error exporting credentials: $($_.Exception.Message)" -ForegroundColor Red
    }
}

function Clear-AWSCredentials {
    Remove-Item Env:\AWS_ACCESS_KEY_ID -ErrorAction SilentlyContinue
    Remove-Item Env:\AWS_SECRET_ACCESS_KEY -ErrorAction SilentlyContinue
    Remove-Item Env:\AWS_SESSION_TOKEN -ErrorAction SilentlyContinue
    Remove-Item Env:\AWS_DEFAULT_REGION -ErrorAction SilentlyContinue

    Write-Host "‚úÖ AWS credentials cleared from environment variables" -ForegroundColor Green
}

# Aliases for PowerShell
Set-Alias -Name aws-profile -Value Set-AWSProfile
Set-Alias -Name aws-whoami -Value Get-AWSIdentity
Set-Alias -Name aws-config-update -Value Update-AWSConfigFromBitwarden
Set-Alias -Name aws-profiles -Value Show-AWSProfiles
Set-Alias -Name awsenv -Value Export-AWSCredentials
Set-Alias -Name awsclear -Value Clear-AWSCredentials
