# Bitwarden Utilities for Bash Shell - Chezmoi Template

{{- if .bitwarden.enabled }}
# =============================================================================
# BITWARDEN UTILITIES - CORE FUNCTIONS
# =============================================================================

# Configuration from Chezmoi data
BW_UTILS_CONFIG_DIR="$HOME/.config/bitwarden-utils"
BW_UTILS_SESSION_FILE="$BW_UTILS_CONFIG_DIR/session"
BWS_TOKEN_ITEM="{{ .bitwarden.token_item | default "BWS Access Token" }}"
BWS_STORAGE_METHOD="{{ .bitwarden.storage_method | default "login" }}"
BWS_PROJECT_ID="{{ .bitwarden.default_project | default "" }}"

# Colors
_BW_RED='\033[0;31m'
_BW_GREEN='\033[0;32m'
_BW_YELLOW='\033[1;33m'
_BW_NC='\033[0m'

# Ensure config directory exists
mkdir -p "$BW_UTILS_CONFIG_DIR"

# Core authentication functions
bw-check() {
    command -v bw &> /dev/null && command -v jq &> /dev/null
}

bw-status() {
    bw-check || return 1
    bw status 2>/dev/null | jq -r '.status // "error"'
}

bw-is-unlocked() {
    [[ "$(bw-status)" == "unlocked" ]]
}

bw-ensure-unlocked() {
    if bw-is-unlocked; then
        return 0
    fi

    if [[ "$(bw-status)" == "locked" ]]; then
        echo -e "${_BW_YELLOW}üîì Unlocking Bitwarden vault...${_BW_NC}"
        local session=$(bw unlock --raw)        if [[ $? -eq 0 && -n "$session" ]]; then
            echo "$session" > "$BW_UTILS_SESSION_FILE"
            chmod 600 "$BW_UTILS_SESSION_FILE"
            export BW_SESSION="$session"
            echo -e "${_BW_GREEN}‚úÖ Vault unlocked${_BW_NC}"
            return 0
        fi
    fi

    echo -e "${_BW_RED}‚ùå Please login and unlock Bitwarden first${_BW_NC}"
    return 1
}

# Session management
bw-get-session() {
    if [[ -f "$BW_UTILS_SESSION_FILE" ]]; then
        cat "$BW_UTILS_SESSION_FILE"
    fi
}

bw-unlock() {
    bw-ensure-unlocked
}

bw-lock() {
    bw lock 2>/dev/null
    rm -f "$BW_UTILS_SESSION_FILE"
    unset BW_SESSION
    echo -e "${_BW_GREEN}üîí Vault locked${_BW_NC}"
}

# Secrets retrieval
bw-get-password() {
    local item_name="$1"
    bw-ensure-unlocked || return 1
    export BW_SESSION=$(bw-get-session)
    bw get password "$item_name" --session "$BW_SESSION" 2>/dev/null
}

bw-get-username() {
    local item_name="$1"
    bw-ensure-unlocked || return 1
    export BW_SESSION=$(bw-get-session)
    bw get username "$item_name" --session "$BW_SESSION" 2>/dev/null
}

bw-get-field() {
    local item_name="$1"
    local field_name="$2"
    bw-ensure-unlocked || return 1
    export BW_SESSION=$(bw-get-session)
    local item_json=$(bw get item "$item_name" --session "$BW_SESSION" 2>/dev/null)
    echo "$item_json" | jq -r ".fields[]? | select(.name==\"$field_name\") | .value" 2>/dev/null
}
# BWS integration
bws-get-token() {
    local token_item="${1:-$BWS_TOKEN_ITEM}"
    local storage_method="${2:-$BWS_STORAGE_METHOD}"

    case "$storage_method" in
        "login") bw-get-password "$token_item" ;;
        "field") bw-get-field "$token_item" "token" ;;
        *) echo -e "${_BW_RED}‚ùå Invalid storage method${_BW_NC}" >&2; return 1 ;;
    esac
}

bws-run() {
    command -v bws &> /dev/null || { echo -e "${_BW_RED}‚ùå BWS CLI not found${_BW_NC}" >&2; return 1; }

    local token=$(bws-get-token)
    [[ -z "$token" ]] && { echo -e "${_BW_RED}‚ùå Failed to get BWS token${_BW_NC}" >&2; return 1; }

    bws --access-token "$token" "$@"
}

bws-inject() {
    command -v bws &> /dev/null || { echo -e "${_BW_RED}‚ùå BWS CLI not found${_BW_NC}" >&2; return 1; }

    local token=$(bws-get-token)
    [[ -z "$token" ]] && { echo -e "${_BW_RED}‚ùå Failed to get BWS token${_BW_NC}" >&2; return 1; }

    if [[ -n "$BWS_PROJECT_ID" ]]; then
        bws run --project-id "$BWS_PROJECT_ID" --access-token "$token" -- "$@"
    else
        bws run --access-token "$token" -- "$@"
    fi
}

# Docker Compose integration
bws-compose-up() {
    echo -e "${_BW_GREEN}üöÄ Starting Docker Compose with BWS secrets...${_BW_NC}"
    bws-inject docker-compose up -d
}

bws-compose-down() {
    docker-compose down
}

# Environment variable management
bw-export-env() {
    for arg in "$@"; do
        if [[ "$arg" == *":"* ]]; then
            local item_name="${arg%:*}"
            local env_name="${arg#*:}"
        else
            local env_name=$(echo "$arg" | tr '[:lower:]' '[:upper:]' | tr ' ' '_')
            local item_name="$arg"
        fi

        local value=$(bw-get-password "$item_name" 2>/dev/null)
        if [[ -n "$value" ]]; then            export "$env_name"="$value"
            echo -e "${_BW_GREEN}‚úÖ Exported $env_name${_BW_NC}"
        else
            echo -e "${_BW_RED}‚ùå Failed to export $env_name${_BW_NC}"
        fi
    done
}

bw-clear-env() {
    for var in "$@"; do
        unset "$var"
        echo -e "${_BW_YELLOW}üßπ Cleared $var${_BW_NC}"
    done
}

# Generate .env file from Bitwarden
bw-generate-env() {
    local env_file="${1:-.env}"
    shift

    echo "# Generated by bw-generate-env on $(date)" > "$env_file"
    echo "# DO NOT COMMIT THIS FILE" >> "$env_file"
    echo "" >> "$env_file"

    for arg in "$@"; do
        if [[ "$arg" == *":"* ]]; then
            local item_name="${arg%:*}"
            local env_name="${arg#*:}"
        else
            local env_name=$(echo "$arg" | tr '[:lower:]' '[:upper:]' | tr ' ' '_')
            local item_name="$arg"
        fi

        local value=$(bw-get-password "$item_name" 2>/dev/null)
        if [[ -n "$value" ]]; then
            echo "$env_name=\"$value\"" >> "$env_file"
            echo -e "${_BW_GREEN}‚úÖ Added $env_name to $env_file${_BW_NC}"
        else
            echo "# $env_name=# FAILED TO RETRIEVE FROM: $item_name" >> "$env_file"
            echo -e "${_BW_RED}‚ùå Failed to retrieve $env_name${_BW_NC}"
        fi
    done

    echo -e "${_BW_GREEN}üìÑ Environment file generated: $env_file${_BW_NC}"
}

# Quick info
bw-info() {
    echo -e "${_BW_YELLOW}=== Bitwarden Status ===${_BW_NC}"
    echo "Status: $(bw-status)"
    echo "Session: $(bw-is-unlocked && echo "Active" || echo "None")"

    if command -v bws &> /dev/null && bws-get-token >/dev/null 2>&1; then
        echo "BWS Access: ‚úÖ Available"
    else
        echo "BWS Access: ‚ùå Not configured"
    fi
}
# Help function
bw-help() {
    cat << 'HELP_EOF'
üîê Bitwarden Utilities Help

AUTHENTICATION:
  bw-unlock             Unlock vault
  bw-lock               Lock vault and clear session
  bw-info               Show status information

SECRETS RETRIEVAL:
  bw-get-password <item>        Get password from item
  bw-get-username <item>        Get username from item
  bw-get-field <item> <field>   Get custom field from item

BWS (SECRETS MANAGER):
  bws-run <command>             Run BWS command with token from vault
  bws-inject <command>          Run command with BWS secrets injected
  bws-compose-up                Start compose with BWS secrets
  bws-compose-down              Stop compose

ENVIRONMENT VARIABLES:
  bw-export-env <items...>      Export passwords as env vars
  bw-clear-env <vars...>        Clear exported environment variables
  bw-generate-env <file> <mappings...>  Generate .env file from vault

EXAMPLES:
  bw-unlock
  bw-get-password "Database Password"
  bw-export-env "API Key:API_KEY" "DB Password:DB_PASS"
  bws-compose-up
  bw-generate-env .env "Database:DB_URL" "Redis:REDIS_URL"
HELP_EOF
}

{{- end }}
